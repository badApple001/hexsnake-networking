

/*
...................o888888o.o88888888o.
.................8888888888888888888888888o.
...............888::::888888888888888888888888o.
.............88::::::::88888888888888888888888888o.
...........o8:::::::::888::顶88888888888888888888888.
..........8888:8::::::8:::::::::顶88888888888888888888.
.........8888::::8888::::::::::::::::顶88888888888 ''''88
........8888:::888888888::::::::::::::::顶888888888 8
.......88.88888888888888888:::::::::::::顶88888888888
......88..888888888888888888:::::::::::顶88888888888888
......88.888888888888888888888::::::::顶88888888888888888
......8..8888888888888888888888::::::顶88888888888888888888
........8888888888888888::88888:::::顶8888888888888888888888
......88888888888888888::::8888::::顶8888888888888888 ''''8888
.....88888888888888888::::8888::::顶:8::***::888888888 888
....88888888888888888::::888:::::顶::::*EYE*::888888888 88
..888888888888888888::::88::::::顶:::::::::::::888888888 88
.8888888888888888888::::8::::::顶:::::::::::::顶888888888 88
888...8888888888::88::::8:::::顶:::8oo8::::::88888888888888 8
88...88888888888:::8:::::::::顶:::::::::::::88888888888888888
.8..8888888888888:::::::::::顶::"8888888":::顶88888888888888888
..8888888888::888::::::::::顶:::::"8a8"::::顶88888888888888888888
.888888888:::::88:::::::::顶88::::::::::::顶88888888888888888888888
8888888888:::::8:::::::::顶88888::::::::顶888888888888888888888888888
888888888:::::8:::::::::顶8888888ooooo顶8888888888888888888888888888888
888888.顶::::::::::::::顶8888888888::::::顶8888888888888888 ''''888888888
8888..顶:::::::::::::::顶88888888888::::::顶8888888888888888 88888888
.888..顶::::::::::::::顶8888888888888:::::::顶888888888888888 888888
..888.顶:::::::::::::顶88888888888888888::::::顶8888888888888 88888
...88.顶:::::::::::::8888:88888888888888888:::::顶顶888888888 8888
...88.顶:::::::::::8888顶::88888::888888888888:::::顶顶88888 888
...8...顶::::::::::8888顶:::8888:::::88888888888::::::顶顶88 888
.......8顶:::::::8888顶:::::888:::::::88:::8888888:::::::顶顶 88
......88顶:::::::8888顶::::::88:::::::::8:::::888888::::::::顶顶 88
.....8888顶:::::888顶:::::::::88::::::::::顶::::8888::::::::::::顶 8
....88888:顶::::888顶::::::::::8:::::::::::顶::::888::::::::::::::顶
...88.888:顶:::888:顶::::::::::8::::::::::::顶::888::::::::::::::::顶
...8.88888顶:::88::顶::::::::::::::::::::::::顶:88::::::::::::::::::顶
.....88888顶:::88::顶:::::::::::::::::::::::::顶88:::::::::::::::::::顶
.....88888顶:::88::顶:::::::::::::::::::::::::顶:8::::::::::::::::::::顶
....888888顶::::8::顶::::::::::::::8888::::::::顶8::::::::::::8888:::::顶
....88888..顶:::8::顶顶:::::::::::888888:::::::顶::::::::::::888888::::顶
....8888...顶顶:::::顶顶::::::::::888888:::::::顶顶::::::::::888888::::顶
....8888....顶:::::::顶顶::::::::::8888:::::::顶顶顶::::::::::8888::::顶''''
.....888....顶顶::::::顶顶顶:::::::::::::::::顶顶::顶::::::::::::::::顶''''
......88.....顶::::::::顶顶顶顶:::::::::::顶顶顶:::顶顶:::::::::::::顶''''
.......88....顶顶:::::::::顶顶顶顶顶顶顶顶顶顶:::::::顶顶顶顶顶顶顶顶''''
........88....顶顶::::::::::::顶顶顶顶顶顶顶::::::::::::顶顶顶顶顶o''''
.........88...8顶顶::::::::::::::::::::::::::::::::::::::::顶
..........8...88顶顶::::::::::::::::::::::顶:::顶::::::::::顶
..............888顶顶::::::::::::::::::顶顶::::::顶顶::::::顶
.............88888顶顶:::::::::::::::顶顶顶:::::::顶顶:::::顶
.............888888顶顶:::::::::::::顶顶顶:::::::::顶顶:::顶
............88888888顶顶:::::::::::顶顶顶:::::::::::顶:::顶
...........88.8888888.顶::::::::顶顶顶::::::::::::::顶::顶
...........8..888888..顶::::::顶顶:::::::::::::::::顶::顶
..............888888..顶:::::顶:::::::::::::::::::顶::顶顶
.............888888...顶::::顶::::::::::::::::::::::::顶顶
.............888888...顶::::顶::::::::::::::::::::::::顶:顶
.............88888...顶::::::::::::::8::::::::::::::::顶::顶
............88888...顶:::::::::::::::88::::::::::::::::顶::顶
...........88888...顶::::::::::::::::8::::::::::::::::::顶::顶
..........88888...顶:::::顶:::::::::::::::::::::顶::::::::顶::顶
..........8888...顶:::::顶:::::::::::::::::::::::顶顶::::::顶::顶
.........8888...顶:::::顶:::::::::::::::::::::::顶顶顶:::::::顶:顶
........888....顶:::::顶顶::::::::::::::::::::::顶顶顶::::::::顶:顶
......8888....顶::::::顶顶:::::::::::::::::::::顶顶顶::::::::: 顶:顶
.....888......顶:::::顶:::::::::::::::::::::::顶顶::::::::::::::顶:顶
..8888.......顶::::::::::::::::::::::::::::::顶::::::::::::::::::顶:顶
.............顶::::::::::::::::::::::::::::::::::::::::::::::::::顶:顶
............顶::::::::顶:::::::::::::::::::::::::::::::::::::::::顶:顶
............顶::::::::顶:::::::::::::::::顶::::::::::::::::::::::顶:顶
...........顶::::::::::顶::::::::::::::顶::::::::::::::::::::::::顶:顶
...........顶:::::::::::顶8::::::::8:顶:::::::::::::::::::::::::顶:顶p
...........顶::::::::::::888hole888顶:::::::::::::::::::::::::::顶:顶o
...........顶:::::::::::::88888888顶:::::::::::::::::::::::::::顶:顶p
...........顶::::::::::::::888888顶::::::::::::::::::::::::::::顶:顶
...........顶:::::::::::::::88888顶:::::::::::::::::::::::::::顶:顶
...........顶:::::::::::::::::88顶::::::::::::::::::::::::::::顶顶
...........顶:::::::::::::::::::顶:::::::::::::::::::::::::::顶顶
...........顶:::::::::::::::::::顶::::::::::::::::::::::::::顶顶
............顶:::::::::::::::::顶::::::::::::::::::::::::::顶顶
............顶:::::::::::::::::顶::::::::::::::::::::::::::顶
.............顶:::::::::::::::顶::::::::::::::::::::::::::顶
.............顶:::::::::::::::顶:::::::::::::::::::::::::顶
..............顶:::::::::::::顶:::::::::::::::::::::::::顶
..............顶:::::::::::::顶:::::::::::::::::::::::顶
...............顶:::::::::::顶:::::::::::::::::::::::顶
...............顶:::::::::::顶::::::::::::::::::::::顶
................顶:::::::::顶::::::::::::::::::::::顶
................顶:::::::::顶:::::::::::::::::::::顶
.................顶:::::::顶:::::::::::::::::::::顶
..................顶::::::顶::::::::::::::::::::顶
..................顶:::::顶::::::::::::::::::::顶
...................顶:::顶::::::::::::::::::::顶
...................顶::顶::::::::::::::::::::顶
....................顶:顶:::::::::::::::::::顶
....................顶顶:::::::::::::::::::顶
....................顶顶::::::::::::::::::顶
....................顶顶:::::::::::::::::顶
....................顶顶:::::顶::::::::顶顶
....................顶顶::::顶顶:::::::顶顶
....................顶顶::::::顶顶:::::顶顶
.....................顶顶::::::::::::::顶顶
.....................顶顶::::顶:::::::::顶顶
......................顶顶::顶顶顶:::::::顶顶
......................顶顶::顶顶顶:::::::顶顶
......................顶顶:::顶顶::::::::::顶
.......................顶顶::顶顶::::::::::顶
.......................顶顶::顶顶:::::::::::顶
.......................顶顶:::顶::::::::::::顶
.......................顶顶:::::::::::::::::顶
.......................顶顶:::::::::::::::::顶
.......................顶顶::::::::::::::::::顶
.......................顶顶::::::::::::::::::顶
.......................顶顶::::::::::::::::::顶
........................顶顶:::::::::::::::::顶
........................顶顶:::::::::::::::::顶
........................顶顶:::::::::::::::::顶
........................顶顶:::::::::::::::::顶
........................顶顶:::::::::::::::::顶
.........................顶顶:::::::::::::::顶
.........................顶顶:::::::::::::::顶
.........................顶顶:::::::::::::::顶
.........................顶顶::::::::::::::顶
..........................顶顶:::::::::::::顶
..........................顶顶:::::::::::::顶
..........................顶顶:::::::::::::顶
..........................顶顶::::::::::::顶
..........................顶顶::::::::::::顶
...........................顶顶:::::::::::顶
...........................顶顶::::::::::顶
...........................顶顶::::::::::顶
............................顶顶::::::::顶
............................顶顶::::::::顶
............................顶顶::::::::顶
.............................顶顶:::::::顶
.............................顶顶:::::::顶
..............................顶顶::::::顶
..............................顶顶::::::顶
..............................顶顶::::::顶
..............................顶顶::::::顶
..............................顶顶::::::顶
..............................顶顶::::::顶
.............................顶顶:::::::顶
............................顶:顶::::::::顶
............................顶:顶:::::::::顶
............................顶:顶::::::::::顶
............................顶:顶:::::::::::顶
............................顶:顶::::::::::::顶
............................顶:顶:::::::::::::顶
............................顶:顶::::::::::::::顶
............................顶顶:::::::::::::::::顶
..............................顶顶::::::::::::::::顶
................................顶顶顶:::::::::顶顶
..................................顶顶::顶::::顶顶
...................................顶顶顶顶顶顶顶
......................................顶顶顶顶顶

 * 
 * 游戏网络数据请求和发送协议数据管理
 * 网络协议类型定义
 * 
 * 
 * 程序猿: ChenJC
 * 最后修改日期: 2020/12/13
 * 
 */

import { FuncSignature } from "../Common/DefineData";
import { Toolkit } from "../Common/Toolkit";


export class GameDataMgr {

    public static url = "ws://103.107.190.12:7000/";
    private static ws: WebSocket;
    private static _linked = false;
    public static get linked() { return this._linked };
    public static onLinkedServerEvent: FuncSignature;
    public static onClosedServerEvent: FuncSignature;

    public static handler: {
        [key: string]: FuncSignature
    } = {};

    public static addListener(event: string, functor: Function, caller: any) {

        if (!GameDataMgr.handler[event]) {
            GameDataMgr.handler[event] = { 
                functor, 
                caller
            };
        }
        else {
            Toolkit.log(`!!!!!!!!${event} event Has been listening`, "yellow", "black");
        }
    }






    /************************************basic*************************************/

    //#region  事件监听

    /**
     * 注册
     * @param id 账号
     * @param ps 密码
     */
    public static Register(id: string, ps: string) {
        let msg: msg_pack = {
            cmd: msg_cmd_type.CallRpc,
            func: Msg_Function_Event.Register,
            pars: [{
                typeName: "System.String",
                jsonStr: id
            }, {
                typeName: "System.String",
                jsonStr: ps
            }]
        };
        GameDataMgr.Send2Server(msg);
    }


    /**
     * 登陆
     * @param id 账号 
     * @param ps 密码
     */
    public static Login(id: string, ps: string) {

        let msg: msg_pack = {
            cmd: msg_cmd_type.CallRpc,
            func: Msg_Function_Event.Login,
            pars: [{
                typeName: "System.String",
                jsonStr: id
            }, {
                typeName: "System.String",
                jsonStr: ps
            }]
        };
        GameDataMgr.Send2Server(msg);
    }

    //加入房间
    public static JoinRoom() {
        let msg: msg_pack = {
            cmd: msg_cmd_type.CallRpc,
            func: Msg_Function_Event.JoinRoom,
            pars: [{
                typeName: "System.Boolean",
                jsonStr: "666"
            }]
        };
        GameDataMgr.Send2Server(msg);
    }

    //创建房间
    public static CreateRoom() {
        let msg: msg_pack = {
            cmd: msg_cmd_type.CallRpc,
            func: Msg_Function_Event.CreateRoom,
            pars: [{
                typeName: "System.String",
                jsonStr: 10000 + Toolkit.RandomInt(1001, 0)
            }, {
                typeName: "System.Int32",
                jsonStr: "4"
            }]
        };
        GameDataMgr.Send2Server(msg);
    }

    /**
     * 准备游戏
     * @param id 账号 
     * @param ps 密码
     */
    public static ReadyGame() {

        let msg: msg_pack = {
            cmd: msg_cmd_type.CallRpc,
            func: Msg_Function_Event.Ready,
            pars: [{
                typeName: "System.Boolean",
                jsonStr: true
            }]
        };
        GameDataMgr.Send2Server(msg);
    }

    //#endregion
    /************************************basic*************************************/



    /**
     * 初始化服务器链接
     */
    public static INIT() {
        let ws = GameDataMgr.ws = new WebSocket(GameDataMgr.url)

        // 当链接服务器成功
        ws.onopen = function () {
            Toolkit.logTrace(".. connection open");
            GameDataMgr._linked = true;
            let reqData: msg_pack = {
                cmd: msg_cmd_type.Local,
                func: "",
                pars: [{
                    typeName: "System.Int32",
                    jsonStr: "4444"
                }, {
                    typeName: "System.Int32",
                    jsonStr: "4444"
                }]
            };

            //服务器链接成功事件派发
            GameDataMgr.onLinkedServerEvent && GameDataMgr.onLinkedServerEvent.functor.call(GameDataMgr.onLinkedServerEvent.caller);

            
            //发送数据 第一次进入服务器
            GameDataMgr.Send2Server(reqData);
        }

        // 当收到服务器信息
        ws.onmessage = GameDataMgr.ReceiveMsg.bind(GameDataMgr)

        //当服务器链接错误的时候
        ws.onerror = function () {
            Toolkit.logTrace(".. connection error");
            GameDataMgr.ws.close();
        }

        //当服务器断开链接的时候
        ws.onclose = function () {
            Toolkit.logTrace(".. connection close");
            GameDataMgr.ws.close();

            //服务器链接断开事件派发
            GameDataMgr.onClosedServerEvent && GameDataMgr.onClosedServerEvent.functor.call(GameDataMgr.onClosedServerEvent.caller);
        }
    }


    /**
     * 发送消息到服务器
     * @param type 类型
     * @param data 数据
     */
    public static Send2Server(data: msg_pack) {
        Toolkit.logTrace(`send msg: ${data.cmd}`);
        if (data) {

            //加上转义符号
            // for (let par of data.pars) {
            //     par.jsonStr = `"${par.jsonStr}"`
            // }

            let msg = JSON.stringify(data);
            if (msg) {
                GameDataMgr.ws.send(msg);
            }
        }
    }

    /**
     * 
     * @param result 接受到消息
     */
    static ReceiveMsg(result: MessageEvent) {

        if (typeof (result.data) == 'string') {
            let msgData: msg_pack = JSON.parse(result.data);
            if (!msgData) return;

            Toolkit.logTrace(`receive ${msgData.cmd} | ${msgData.func}`)
            if (GameDataMgr.handler[msgData.func]) {
                GameDataMgr.handler[msgData.func].functor.call(GameDataMgr.handler[msgData.func].caller, msgData);
            }
        }
    }

}



/**
 * 消息方法名
 */
export class Msg_Function_Event {

    //注册
    public static Register = "Register";

    //注册回调
    public static RegisterCallback = "RegisterCallback";

    //请求登陆
    public static Login = "Login";

    //登陆回调
    public static LoginCallback = "LoginCallback";

    //创建房间
    public static CreateRoom = "CreateRoom";

    //创建房间回调
    public static CreateRoomCallBack = "CreateRoomCallBack";

    //请求加入房间
    public static JoinRoom = "JoinRoom";

    //加入房间回调
    public static JoinRoomCallBack = "JoinRoomCallBack";

    //获取所有房间列表
    public static GetRooms = "GetRooms";

    //获取所有房间列表回调
    public static SetRooms = "SetRooms";

    //退出房间
    public static ExitRoom = "ExitRoom";

    //退出战斗返回大厅和回调 或者 接受通知 别的玩家退出游戏回调 , 请求自身退出的大厅 
    public static BackGame = "BackGame";

    //解散房间(房主) / 接收到房主的解算房间通知回调
    public static DismissRoom = "DismissRoom";

    //准备
    public static Ready = "Ready";

    //准备回调
    public static ReadyCallback = "ReadyCallback";

    //开始战斗/回调
    public static StartGame = "StartGame";

    //请求退出游戏
    public static ExitGame = "ExitGame";

    //获取房间数据(队伍数据)/ 回调
    public static GetRoomData = "GetRoomData";

    //选择队伍: 参数bool为选择红绿队伍/回调
    public static SelectTeam = "SelectTeam";


}



/**
 * 消息数据类型
 */
export type msg_pack =
    {
        result?: boolean; //来自服务器的 发送的时候可以不填
        info?: string; //来自服务器的 发送的时候可以不填
        cmd: msg_cmd_type;
        func: string;
        pars?: any[];
    }


/** 玩家数据 */
export type player_item_data = {
    name: string,
    ready: boolean,
    teamTag: boolean,
    iconName: string
}


/**
 * 消息命令枚举
 */
export enum msg_cmd_type {

    /// <summary>
    /// 面向实体类型调用远程函数
    /// 使用此命令即可在NetPlayer的派生类中定义rpc函数进行调用
    /// </summary>
    EntityRpc = 0,
    /// <summary>
    /// 如果是客户端调用则在服务器执行 如果是服务器调用则在客户端执行.
    /// 在服务器端,如果出现多线程抢夺资源调用Client错误时，可使用SafeCall命令来执行
    /// </summary>
    CallRpc = 1,
    /// <summary>
    /// 安全调用服务器函数,当多线程并行时会有1%的几率发生线程抢夺资源，
    /// 如果在RPC函数内部调用client的时候是其他客户端的client对象。出现这种情况时建议使用此命令，
    /// 否则可以使用CallRpc命令，
    /// 使用此命令时,函数第一个参数将会嵌入NetPlayer参数
    /// </summary>
    SafeCall = 2,
    /// <summary>
    /// (自身转发)服务器只转发给发送方客户端
    /// </summary>
    Local = 3,
    /// <summary>
    /// (场景转发)服务器负责转发给在同一房间或场景内的玩家
    /// </summary>
    Scene = 4,
    /// <summary>
    /// (场景转发,可靠指令)服务器负责转发给在同一房间或场景内的玩家
    /// </summary>
    SceneRT = 5,
    /// <summary>
    /// (公告指令)服务器负责转发给所有在线的玩家
    /// </summary>
    Notice = 6,
    /// <summary>
    /// (公告指令,可靠传输)服务器负责转发给所有在线的玩家
    /// </summary>
    NoticeRT = 7,
    /// <summary>
    /// 发送心跳包命令, 内部命令
    /// </summary>
    SendHeartbeat = 8,
    /// <summary>
    /// 回调心跳包命令, 内部命令
    /// </summary>
    RevdHeartbeat = 9,
    /// <summary>
    /// 多线程远程过程调用函数 (RPC)
    /// </summary>
    ThreadRpc = 10,
    /// <summary>
    /// 请求服务器移除此客户端
    /// </summary>
    QuitGame = 11,
    /// <summary>
    /// 其他命令或用户自定义命令
    /// </summary>
    OtherCmd = 12,
    /// <summary>
    /// 服务器连接人数溢出, 新的客户端将不允许连接服务器, 可设置服务器的LineUp值调整
    /// </summary>
    ExceededNumber = 13,
    /// <summary>
    /// 服务器爆满, 阻止客户端连接命令, 仅限服务器回调给客户端使用的命令, 客户端可监听OnBlockConnection事件处理， 内部命令
    /// </summary>
    BlockConnection = 14,
    /// <summary>
    /// 可靠传输接收指令. 内部命令
    /// </summary>
    ReliableTransport = 15,
    /// <summary>
    /// 可靠传输数据确认回调, 内部命令
    /// </summary>
    ReliableCallback = 16,
    /// <summary>
    /// 当客户端连接主服务器时, 主服务器检测分区服务器在线人数如果处于爆满状态, 
    /// 服务器发送切换端口让客户端连接新的服务器IP和端口. 内部命令
    /// </summary>
    SwitchPort = 17,
    /// <summary>
    /// 标记客户端唯一标识, 内部命令
    /// </summary>
    Identify = 18,
    /// <summary>
    /// 操作同步，服务器使用NetScene.AddOperation方法，客户端UdpClient.AddOperation方法。 内部指令
    /// </summary>
    OperationSync = 19,
    /// <summary>
    /// 局域网寻找主机命令, 内部使用
    /// </summary>
    Broadcast = 20,
    /// <summary>
    /// 连接指令 (内部)
    /// </summary>
    Connect = 22,


}